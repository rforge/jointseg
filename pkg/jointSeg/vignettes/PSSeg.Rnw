% \VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{Parent-Specifc copy number segmentation}
%\VignetteIndexEntry{PSSeg}

\documentclass{article} 
\usepackage[latin1]{inputenc}
\usepackage{color, pdfcolmk}
\usepackage{geometry}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\usepackage{hyperref}
\title{PSSeg: Parent-Specifc copy number segmentation}
\author{M. Pierre-Jean, G. Rigaill, P. Neuvial}

\newcommand{\code}[1]{\texttt{#1}}

<<setup, include=FALSE, cache=FALSE, show=FALSE>>=
library(knitr)
# set global chunk options
opts_chunk$set(fig.path='fig/PSSeg-', fig.align='center', fig.show='hold')
options(replace.assign=TRUE,width=90)
@ 

\begin{document}
%\SweaveOpts{concordance=TRUE}

<<include=FALSE>>=
opts_chunk$set(dev='png', fig.width=5, fig.height=5)
@

\setkeys{Gin}{width=0.8\textwidth}
\maketitle

\begin{abstract}
This vignette describes how to use the \code{jointseg} package to partition bivariate DNA copy number signals from SNP array data into segments of constant parent-specific copy number.  We demonstrate the use of the \code{PSSeg} function of this package for applying two different strategies.  Both strategies consist in first identifying a list of candidate change points through a fast (greedy) segmentation method, and then to prune this list is using dynamic programming \cite{bellman61approximation}.  The segmentation method presented here is Recursive Binary Segmentation (RBS, \cite{gey08using}). We refer to \cite{pierre-jean14performance} for a more comprehensive performance assessment of this method and other segmentation methods.
\paragraph{keywords:} segmentation, change point model, binary segmentation, dynamic programming, DNA copy number, parent-specific copy number.
\end{abstract}

\tableofcontents

\clearpage
Please see Appendix \ref{citation} for citing \code{jointseg}.

<<message=FALSE>>=
library("jointseg")
@ 

\section{Preparing data to be segmented}
\code{PSSeg} requires normalized copy number signals, in the form of total copy number estimates and allele B fractions for tumor, the (germline) genotype of SNP.  Loci are assumed to come from a single chromosome and to be ordered by genomic position. 

For illustration, we show of such a data set may be created from real data.  We use data from a public SNP array data set, which is distributed in the \code{acnr} package (on which the \code{jointseg} package depends).

<<data>>=
data <- loadCnRegionData(dataSet="GSE29172", tumorFraction=1)
str(data)
@ 

This data set consists of copy number signals from \Sexpr{length(unique(data[["region"]]))} types of genomic regions:
<<>>=
table(data[["region"]])
@ 
These regions are coded  as $(C_1,C_2)$, where $C_1$ denotes the minor copy number and $C_2$ denotes the major copy number, i.e. the smallest and the largest of the two parental copy numbers (see e.g. \cite{neuvial11statistical} for more detailed definitions).  For example,  $(1,1)$ corresponds to a normal state, $(0,1)$ to an hemizygous deletion, $(1,2)$ to a single copy gain and $(0,2)$ to a copy-neutral LOH (loss of heterowygosity).

<<regDat, echo=TRUE>>=
idxs <- sort(sample(1:nrow(data), 2e4))
plotSeg(data[idxs, ])
@ 

These real data can then be used to create a realistic DNA copy number profile of user-defined length, and harboring a user-defined number of breakpoints.  This is done using the \code{getCopyNumberDataByResampling} function.  Breakpoint positions are drawn uniformly) among all possible loci.  Between two breakpoints, the copy number state corresponds to one of the types of regions in \code{data}, and each data point is drawn with replacement from the corresponding true copy number signal from the region.  More options are available from the documentation of \code{getCopyNumberDataByResampling}.

<<createProfile>>=
K <- 10
bkp <- c(408,1632,3905, 5890,6709, 10481, 12647,14089,17345,18657)
len <- 2e4
sim <- getCopyNumberDataByResampling(len, bkp=bkp, minLength=500, regData=data)
datS <- sim$profile
str(datS)
@ 

The resulting copy-number profile is plotted below.
<<profile-fig>>=
plotSeg(datS, sim$bkp)
@ 

\section{Preprocessing}
We advise the following (typical) preprocessing before segmentation:
\begin{enumerate}
\item $\log$-transform total copy numbers in order to stabilize their variance; this step improve segmentation results for all methods.
<<log-transform>>=
datS$c <- log2(datS$c)-1
@
\item smooth single point outliers as suggested by \cite{olshen04circular}.  This step is controlled by the \code{dropOutliers} option in the \code{PSSeg} function, which internally calls the {\code{smooth.CNA}} function of the \code{DNAcopy package}. The default value for this option is \code{TRUE}.
\item convert allelic ratios to (unimodal) decrease in heterozygosity ($d$), as initially suggested by \cite{staaf08segmentation-based}. This step is performed internally in the \code{PSSeg} function.
\end{enumerate}


\section{PSSeg segmentation using RBS}
We can now use the \code{PSSeg} function to segment signals.  The method consists in three steps:
\begin{enumerate}
\item run a fast (yet approximate) segmentation on these signals in order to obtain a set of (at most hundreds of) candidate change points.  This is done using  Recursive Binary Segmentation (RBS) \cite{gey08using};
\item prune the obtained set of change points using dynamic programming \cite{bellman61approximation}
\item select the best number of change points using a model selection criterion proposed by  \cite{lebarbier05detecting}
\end{enumerate}

\subsection{Initial segmentation and pruning}
<<BinSeg>>=
resRBS <- PSSeg(data=datS, K=2*K, method="RBS", stat=c("c", "d"), profile=TRUE)
@ 

Note that this is fast:
<<>>=
resRBS$prof[, "time"]
@ 

\subsection{Plot segmented profile}
To plot the PSSeg segmentation results together with the true breakpoints, do :
<<plotRBS>>=
plotSeg(datS, list(true=sim$bkp, est=resRBS$bestBkp))
@ 

\subsection{Results evaluation}
The \code{PSSeg} function returns the original segmentation (by \code{RBS}), the result of the pruning step, and the best model (among those selected by dynamic programming) according to the criterion proposed by \cite{lebarbier05detecting}.  

% TODO: update and use TpFp
The quality of the best segmentation can be assessed as follows.  The number of true positives (TP) is the number of true change points for which there exists a candidate change point closer than a given tolerance \code{tol}.  The number of false positives is defined as the number of true negatives (all those which are not change points) for which the candidate change points are out of tolerance area and those in tolerance area where there already exists a candidate change point. %The true negative rate (TNR) is defined as 1-FPR.
% True negative are defined as the midpoints of intervals between true change points (augmented by points 0 and $n+1$, where $n$ is the number of loci.  The true negative rate (TNR) is the proportion of true negatives for which there is no candidate change point closer than \code{tol}. 
 By construction, $TP \in \{0, 1,  \cdots, K \}$ where $K$ is the number of true change points.
 
<<>>=
print(getTpFp(resRBS$bestBkp, sim$bkp, tol=5))
@ 

Obviously, this performance measure depends on the chosen tolerance:

<<>>=
perf <- sapply(0:10, FUN=function(tol) {
    getTpFp(resRBS$bestBkp, sim$bkp, tol=tol,relax = -1)
})
print(perf)
@ 

% \section{PSSeg segmentation using GFLARS}
% We can now use the \code{PSSeg} function to segment signals with GFLARS method only on heterozygous SNP.  The method consists in three steps:
% \begin{enumerate}
% \item run a fast (yet approximate) segmentation on these signals in order to obtain a set of (at most hundreds of) candidate change points.  This is done using  Group Fused Lars \cite{vert10fast};
% \item prune the obtained set of change points usign dynamic programming \cite{bellman61approximation}
% \item select the best number of change points using a model selection criterion proposed by  \cite{lebarbier05detecting}
% \end{enumerate}

% \subsection{Initial segmentation and pruning}
% <<GFL>>=
% resGFL <- PSSeg(data=datS, K=6*K, method="GFLars", stat=c("c", "d"), profile=TRUE)
% @ 

% Note that this is fast due to the low number in the data.
% <<>>=
% resGFL$prof[, "time"]
% @ 

% \subsection{Plot segmented profile}
% To plot the PSSeg segmentation results together with the true breakpoints, do :
% <<plotGFL>>=
% plotSeg(datS, list(true=sim$bkp, est=resGFL$bestBkp))
% @ 

% \subsection{Results evaluation}
% The \code{PSSeg} function returns the original segmentation (by \code{GFLARS}), the result of the pruning step, and the best model (among those selected by dynamic programming) according to the criterion proposed by \cite{lebarbier05detecting}.  

% <<>>=
% print(getTpFp(resGFL$bestBkp, sim$bkp, tol=15))
% @ 

% Obviously, this performance measure depends on the chosen tolerance:

% <<>>=
% perf <- sapply(0:20, FUN=function(tol) {
%     getTpFp(resGFL$bestBkp, sim$bkp, tol=tol)
% })
% print(perf)
% @ 

\appendix
\section{Acknowledgements}
This package has been documented using the \href{http://inlinedocs.r-forge.r-project.org}{inlinedocs} package.

\section{Session information}

<<sessionInfo>>=
sessionInfo()
@ 

\section{Citing \code{jointseg}}
\label{citation}

<<message=FALSE>>=
citation("jointseg")
@ 


\bibliographystyle{plain}
\bibliography{jointSeg}
\end{document}
